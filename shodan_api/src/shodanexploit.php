<?php
# Shodan Web API Class Interface
# 
# Coded by inv0ked.israel
# Version 0.1 BETA
###
# It currently supports 8 methods:
# 1. Search(query) 			- Search the SHODAN database.
#							Optional arguments:
#							1.1 city	-- Use the 'city' filter to find devices located in the given city.
#										   Examples:
#										   1.1.1 Apache servers located in Zurich: apache city:"Zurich"
#										   1.1.2 Nginx servers located in San Diego, USA: nginx city:"San Diego" country:US
#							1.2 country -- The 'country' filter is used to narrow results down by..country.
#										   Examples:
#										   1.2.1 Apache servers located in Switzerland: apache country:CH
#										   1.2.2 Nginx servers located in Germany: nginx country:DE
#							1.3 geo		-- The 'geo' filter allows you to find devices that are within a certain radius of the given latitude and longitude.
#										   Examples:
#										   1.3.1 Apache servers near 42.9693,-74.1224: apache geo:42.9693,-74.1224
#										   1.3.2 Devices within a 50km radius of San Diego (32.8,-117): geo:32.8,-117,50
#							1.4 hostname-- The 'hostname' filter lets you search for hosts that contain the value in their hostname.
#										   Examples:
#										   1.4.1 GWS with 'google' in the hostname: "Server: gws" hostname:google
#										   1.4.2 Nginx with '.de' in the hostname: nginx hostname:.de
#							1.5 net		-- The 'net' filter provides a mechanism for limiting the search results to a specific IP or subnet.
#										   Examples:
#										   1.5.1 All data for IP 216.219.143.14: net:216.219.143.14
#										   1.5.2 All data in the subnet 216.219.143.*: net:216.219.143.0/24
#										   1.5.3 All data in the subnet 216.219.*: net:216.219.0.0/16
#										   1.5.4 Apache servers in the subnet 216.*: apache net:216.0.0.0/8
#							1.6 os		-- The 'os' filter is used to search for specific operating systems.
#										   Examples:
#										   1.6.1 Microsoft-IIS running on Windows 2003: microsoft-iis os:"windows 2003"
# 										   1.6.2 JBoss running on Linux: JBoss os:linux
#							1.7 port	-- The 'port' filter is used to narrow the search to specific services. Possible values are: 21, 22, 23 and 80.
# 										   Example:
#										   1.71 Look only at the FTP banners for ProFTPd: proftpd port:21
#							1.8 before / after -- The before / after filters let you search only for data that was collected before or after the given date
#												  Examples:
#												  1.8.1 Nginx server banners found before January 18 2010: nginx before:18/01/2010
#    											  1.8.2 Apache servers in Switzerland found between March 22 2010 and June 4 2010:
#														apache country:CH after:22/03/2010 before:4/6/2010
# 2. Host(ip)				- Get all available informtaion on an ip.
# 3. Fingerprint(query)		- Determine the software based on the banner.
# 4. Search Exploits(query) - Search exploit on metasploit, cve, osvdb, exploitdb, or packetstorm.
#							Optional arguments:
#							4.1 cve 	-- CVE identifier (ex. 2010-0432)
#							4.2 osvdb 	-- OSVDB identifier (ex. 11666)
#							4.3 msb 	-- Microsoft Security Bulletin ID (ex. MS05-030)
# 							4.4 bid 	-- Bugtraq identifier (ex. 13951)
# 5. Exploit-DB Search		- Search exploit at exploit-db.
#							Optional arguments:
#							5.1 author 	-- Name of the exploit submitter
#							5.2 platform-- Target platform (e.g. windows, linux, hardware etc.)
#							5.3 port 	-- Service port number
#							5.4 type 	-- Any, dos, local, papers, remote, shellcode and webapps
# 6. Exploit-DB Download(id)- Download the exploit code from the Exploit-DB archive.
# 7. MSF Search(query)		- Search for a Metasploit module. 
# 8. MSF Module Download(query) - Download a metasploit module given the fullname of the module (ex. auxiliary/admin/backupexec/dump).
###
error_reporting(0);

class Shodan_WebAPI {
	var $base_url	= 'http://www.shodanhq.com/api/';
	var $api_key	= 'YhaCIpXj8Sh1nzUGmSW8df5cOODen23T';
	
	function search($query) {
		$this->addr = "{$this->base_url}search?q={$query}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if(empty($this->body))
			return("-Error, No results for this query.\r\n");
		else
			return(print_r($this->body));
	}
	
	function host($ip) {
		$this->addr = "{$this->base_url}host?ip={$ip}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if(isset($this->body['error']) && $this->body['error'] == 'No information available for that IP.')
			return("-Error, No information available for that IP.\r\n");
		else
			return(print_r($this->body)); 
	}
	
	function fingerprint($query) {
		$this->addr = "{$this->base_url}fingerprint?banner={$query}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if(empty($this->body['matches']))
			return("-Error, No results for this banner.\r\n");
		else
			return(print_r($this->body));
	}

	function search_exploits($query) {
		$this->addr = "{$this->base_url}search_exploits?q={$query}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if($this->body['total'] == 0)
			return("-Error, No results for this query.\r\n");
		else
			return(print_r($this->body));
	}

	function edb_search($query) {
		$this->addr = "{$this->base_url}exploitdb/search?q={$query}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if($this->body['total'] == 0)
			return("-Error, No results for this query.\r\n");
		else
			return(print_r($this->body));
	}

	function edb_download($id) {
		if(intval($id)) {
			$this->addr = "{$this->base_url}exploitdb/download?id={$id}&key={$this->api_key}";
			$this->req	= file_get_contents($this->addr);
			$this->body = $this->json_decode($this->req);
			if(isset($this->body['error'])) {
				return("-Error, Invalid exploit db id.\r\n");
			} else {
				if(file_put_contents("{$this->body['filename']}", $this->body['data']))
					return("+OK, The exploit {$this->body['filename']} successfully downloaded.\r\n");
				else
					return("-Error, It was impossible to download the exploit {$filename}\r\n");
			}
		} else {
			return("-Error, Invalid exploit db id.\r\n");
		}
	}
	
	function msf_search($query) {
		$this->addr = "{$this->base_url}msf/search?q={$query}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if($this->body['total'] == 0)
			return("-Error, No results for this query.\r\n");
		else
			return(print_r($this->body));
		
	}

	function msf_download($query) {
		$this->addr = "{$this->base_url}msf/download?id={$query}&key={$this->api_key}";
		$this->req	= file_get_contents($this->addr);
		$this->body = $this->json_decode($this->req);
		if(isset($this->body['error'])) {
			return("-Error, Invalid Metasploit module.\r\n");
		} else {
			$filename = str_replace('/', '_', $this->body['filename']);
			if(file_put_contents("{$filename}", $this->body['data']))
				return("+OK, The metasploit module {$filename} successfully downloaded.\r\n");
			else
				return("-Error, It was impossible to download the module {$filename}\r\n");
		}
	}
	
	# This function will do the work better..
	# Credit to php.net for json_decode(Modded by Pr0T3cT10n).
	function json_decode($json) {
		$comment = false;
		$out = '$x=';
		for ($i=0; $i<strlen($json); $i++) {
			if (!$comment) {
				if (($json[$i] == '{') || ($json[$i] == '['))
					$out.= ' array(';
				else if (($json[$i] == '}') || ($json[$i] == ']'))
					$out.= ')';
				else if ($json[$i] == ':')
					$out.= '=>';
				else
					$out.= $json[$i];         
			}
			else {
				if($json[$i] == '$')
					$out.= '\$';
				else
					$out.= $json[$i];
			}
			if ($json[$i] == '"' && $json[($i-1)]!="\\")
				$comment = !$comment;
		}
		eval("{$out};");
		return($x);
	}
}
?>